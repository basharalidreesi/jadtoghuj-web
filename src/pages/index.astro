---
import type { Project } from "../sanity/sanity.types";
import sanityClient from "../sanity/sanity.cli";
import groq from "groq";
import Layout from "../layouts/Layout.astro";
import SanityImage from "../components/SanityImage.astro";

const projects: Project[] = await sanityClient.fetch(groq`*[_type == "project" && isHiddenFromListings != true && defined(slug.current)] {
	title,
	slug,
	date,
	"summary": pt::text(summary),
	client,
	category->{name},
	lookContent,
	mediaContent,
} | order(date desc)`);
---

<Layout>
	<h1>
		Homepage
	</h1>
	<div class="container" style="
		--colour-entries-default-background: #fff;
		--colour-entries-active-background: aqua;
		--colour-entries-separator: #999;
	">
		{projects && projects.length !== 0 && (
			<h2>
				Projects
			</h2>
			<div class="projectArray" data-display-mode="looks-grid"> <!-- looks-grid | projects-list -->
				{projects.map((project) => {
					const hasLooks = project.lookContent && project.lookContent.length !== 0 && project.lookContent.filter((look) => look.asset)?.length !== 0;
					const hasMedia = project.mediaContent && project.mediaContent.length !== 0;
					const Wrapper = hasMedia ? "a" : "div";
					return (
						<div class="project" data-active={hasMedia ? "true" : "false"} data-tooltip-enabled="true" data-tooltip-text={hasMedia ? project.title : "Coming Soon"}>
							<div class="project-title">
								<h3>
									{project.title}
								</h3>
							</div>
							{hasLooks && (
								<div class="project-looks">
									{project.lookContent?.filter((look) => look.asset).map((look) => {
										return (
											<div class="project-look">
												<Wrapper class="look-card-outer" href={hasMedia ? `/projects/${project.slug?.current}` : null}>
														<div class="look-card-inner">
															<SanityImage node={look} alt="" />
														</div>
												</Wrapper>
											</div>
										);
									})}
								</div>
							)}
							<div class="project-summary">
								{project.summary || "—"}
							</div>
							<div class="project-client">
								{project.client || "—"}
							</div>
							<div class="project-category">
								{project.category?.name || "—"}
							</div>
						</div>
					);
				})}
			</div>
			<div class="ribbon">
				<button class="switch" name="projects-switch" value="looks-grid">
					<span>
						Looks
					</span>
					<svg width="1em" height="1em" viewBox="0 0 25 25" xmlns="http://www.w3.org/2000/svg">
						<path d="M8 14.5C7 15 5.5 16 5.5 19.5H19.5C19.5 16 18.3416 15.1708 17 14.5C16 14 14 14 14 12.5C14 11 15 10.25 15 8.25C15 6.25 14 5.25 12.5 5.25C11 5.25 10 6.25 10 8.25C10 10.25 11 11 11 12.5C11 14 9 14 8 14.5Z" />
					</svg>
				</button>
				<button class="switch" name="projects-switch" value="projects-list">
					<span>
						Details
					</span>
					<svg width="1em" height="1em" viewBox="0 0 25 25" xmlns="http://www.w3.org/2000/svg">
						<path d="M7.10153 17.5001C7.10153 17.8323 6.83221 18.1016 6.5 18.1016C6.16778 18.1016 5.89847 17.8323 5.89847 17.5001C5.89847 17.1678 6.16778 16.8985 6.5 16.8985C6.83221 16.8985 7.10153 17.1678 7.10153 17.5001Z" />
						<path d="M7.10153 7.5C7.10153 7.83221 6.83221 8.10153 6.5 8.10153C6.16778 8.10153 5.89847 7.83221 5.89847 7.5C5.89847 7.16778 6.16778 6.89847 6.5 6.89847C6.83221 6.89847 7.10153 7.16778 7.10153 7.5Z" />
						<path d="M7.10153 12.5C7.10153 12.8322 6.83221 13.1015 6.5 13.1015C6.16778 13.1015 5.89847 12.8322 5.89847 12.5C5.89847 12.1678 6.16778 11.8985 6.5 11.8985C6.83221 11.8985 7.10153 12.1678 7.10153 12.5Z" />
						<path d="M10 7.5H19M10 17.5H19M10 12.5H19" />
					</svg>
				</button>
			</div>
		)}
	</div>
</Layout>

<style lang="scss">
	// imports
	@use "../styles/mixins";

	// general setup
	:root {
		// entries
		--entries-default-opacity: 0.25;
		--entries-active-opacity: 0.5;
	}

	// general layouting
	.container {
		display: flex;
		flex-flow: column;
		row-gap: var(--page-padding-y);
	}
	h1,
	h2 {
		@include mixins.hidden;
	}

	// looks grid
	:root {
		--looks-grid-columns: 7;
		--looks-grid-aspect-ratio: 1 / 2;
		@media (max-width: 1280px) {
			--looks-grid-columns: 6;
		}
		@media (max-width: 1024px) {
			--looks-grid-columns: 5;
		}
		@media (max-width: 768px) {
			--looks-grid-columns: 4;
		}
		@media (max-width: 512px) {
			--looks-grid-columns: 3;
		}
	}
	.projectArray[data-display-mode="looks-grid"] {
		& {
			display: grid;
			grid-template-columns: repeat(var(--looks-grid-columns), 1fr);
			row-gap: var(--page-padding-y);
			column-gap: var(--page-padding-x);
		}
		.project {
			display: contents;
		}
		.project-title {
			@include mixins.hidden;
		}
		.project-looks {
			display: contents;
		}
		.project-look {
			position: relative;
			aspect-ratio: var(--looks-grid-aspect-ratio);
		}
		.project-look::before {
			content: "";
			position: absolute;
			inset: 0;
			border-radius: 50%;
			filter: blur(1rem);
			background: var(--colour-entries-default-background);
			opacity: var(--entries-default-opacity);
		}
		.project-look:last-of-type::after {
			content: "";
			position: absolute;
			top: 0;
			right: calc(var(--page-padding-x) / 2 * -1);
			display: block;
			height: 100%;
			width: 1px;
			background: var(--colour-entries-separator);
			pointer-events: none;
		}
		div.look-card-outer {
			width: 100%;
			height: 100%;
		}
		.look-card-outer::before {
			content: "";
			position: absolute;
			left: calc(var(--page-padding-x) / 2 * -1);
			right: calc(var(--page-padding-x) / 2 * -1);
			top: 0;
			bottom: 0;
		}
		.look-card-inner {
			width: 100%;
			height: 100%;
			mask-image: linear-gradient(to right, transparent, black 1.5rem, black calc(100% - 1.5rem), transparent);
		}
		:global(img),
		:global(picture) {
			width: auto;
			height: 100%;
		}
		:global(img) {
			object-fit: cover;
			margin: auto;
		}
		.project-summary,
		.project-client,
		.project-category {
			display: none;
		}
		.project[data-active="true"] {
			@media (any-hover: hover) {
				&:hover .project-look::before {
					background: var(--colour-entries-active-background);
					opacity: var(--entries-active-opacity);
				}
			}
		}
		.project[data-active="false"] {
			:global(img) {
				filter: grayscale(1);
			}
		}
	}

	// projects list
	.projectArray[data-display-mode="projects-list"] {
		& {
			display: flex;
			flex-flow: column;
		}
		.project {
			position: relative;
			display: grid;
			grid-template-columns: repeat(var(--projects-list-columns), 1fr);
			padding-inline: var(--button-padding-inline);
			column-gap: var(--button-padding-inline);
		}
		.project:first-of-type {
			border-block-start: 1px solid var(--colour-entries-separator);
		}
		.project::before {
			content: "";
			position: absolute;
			inset: 0;
			border-radius: 9999px;
			filter: blur(1rem);
			background: var(--colour-entries-default-background);
			opacity: var(--entries-default-opacity);
			z-index: -1;
		}
		.project::after {
			content: "";
			position: absolute;
			bottom: 0;
			display: block;
			height: 1px;
			width: 100%;
			background: var(--colour-entries-separator);
			pointer-events: none;
		}
		.project-looks {
			display: flex;
			align-items: start;
			justify-content: start;
			column-gap: calc(var(--button-padding-inline) / 2);
			overflow-x: hidden;
			// mask-image: linear-gradient(to right, black calc(100% - 3rem), transparent 100%);
		}
		.project-look {
			flex: 0 0 auto;
		}
		.project-look:first-of-type a::after {
			content: "";
			position: absolute;
			inset: 0;
		}
		:global(img),
		:global(picture) {
			width: auto;
			height: var(--projects-list-look-height);
		}
		.project[data-active="true"] {
			@media (any-hover: hover) {
				&:hover::before {
					background: var(--colour-entries-active-background);
					opacity: var(--entries-active-opacity);
				}
			}
		}
		.project[data-active="false"] {
			:global(img) {
				filter: grayscale(1);
			}
		}
		.project-title,
		.project-summary,
		.project-client,
		.project-category {
			@include mixins.ui-body;
			@include mixins.nowrap($ellipsis: true, $max-lines: 2);
		}
		@media (min-width: 1025px) {
			& {
				--projects-list-columns: 5;
				--projects-list-look-height: 5rem;
			}
			.project {
				padding-block: calc(var(--page-padding-y) / 2);
			}
		}
		@media (max-width: 1024px) {
			& {
				--projects-list-columns: 4;
				--projects-list-look-height: 4rem;
			}
			.project {
				padding-block: var(--button-padding-block);
			}
			.project-client {
				display: none;
			}
		}
		@media (max-width: 768px) {
			& {
				--projects-list-columns: 3;
				--projects-list-look-height: 3rem;
			}
			.project-category {
				display: none;
			}
		}
	}

	// switch
	.ribbon {
		& {
			align-self: end;
			position: sticky;
			bottom: var(--page-padding-y);
			display: flex;
			align-items: center;
			justify-content: center;
			column-gap: var(--button-padding-block);
			z-index: 99;
		}
		.switch {
			display: block;
			@include mixins.ui-button;
			@include mixins.ui-subheading($line-height: 1.0);
			@include mixins.nowrap;
			& {
				padding: min(var(--button-padding-block), var(--button-padding-inline));
			}
		}
		span {
			@include mixins.hidden;
		}
		svg {
			// fill: transparent;
			stroke-linejoin: round;
			stroke: currentColor;
			stroke-width: 1.2px;
		}
	}
</style>

<script>
	const projectArray = document.querySelector(".projectArray");
	const buttons = document.querySelectorAll(`button[name="projects-switch"]`);
	buttons?.forEach((button) => {
		button.addEventListener("click", (event) => {
			if (!projectArray) { return; };
			const value = (event.target as HTMLButtonElement).closest("button")?.getAttribute("value");
			if (!value) { return; };
			projectArray.setAttribute("data-display-mode", value);
		});
	});
</script>